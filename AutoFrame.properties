//glavni ekran programa za knjigovodstvo
//================================================================
import java.awt.*;
import java.io.*;
import java.awt.event.*;
import java.io.File;

import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.awt.geom.GeneralPath;
import javax.swing.*;
import javax.swing.border.*;
import java.sql.*;
import javax.swing.plaf.metal.*;
import java.util.*;
import java.applet.*;
import java.beans.PropertyVetoException.*;


/**
  * This is the main container frame for the Fin app
  *
  * @version 1.0
  * @author Nenad Ivanisevic
  */
public class AutoFrame extends JFrame {

    JMenuBar menuBar;
    public static JDesktopPane desktop;
    JInternalFrame toolPalette;
    JCheckBoxMenuItem showToolPaletteMenuItem;
    //public ConnMySQL connection;     

    static final Integer DOCLAYER = new Integer(5);
    static final Integer TOOLLAYER = new Integer(6);
    static final Integer HELPLAYER = new Integer(7);

    static final String ABOUTMSG = "Fin \n \nOva aplikacija je pisana u Javi. \n \nBIN - Soft team \n  Nenad Ivanisevi\u0107\n  Boris Ivanisevi\u0107";
    static final String PORUKA = "Ne mo\u017ee se ostvariti konekcija"; 
    static final String PRINTT = "\u0160tampa u Javi"; 
//--------------------------------------------------------------------------------------------
	public AutoFrame() {
        super("BIN-Soft              = DND Registracija vozila =");
        final int inset = 50;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		//setBounds ( inset, inset, screenSize.width - inset*2, screenSize.height - inset*2 );
		setSize(screenSize.width,screenSize.height);
		buildContent();
		buildMenus();
	
		this.addWindowListener(new WindowAdapter() {
	                       public void windowClosing(WindowEvent e) {
				   quit();}});
	UIManager.addPropertyChangeListener(new UISwitchListener((JComponent)getRootPane()));
    }
//--------------------------------------------------------------------------------------------
    protected void buildMenus() {
		menuBar = new JMenuBar();
		menuBar.setOpaque(true);
		JMenu file = buildFileMenu();
		file.setMnemonic('P');
		JMenu nalozi = buildNalMenu();
		nalozi.setMnemonic('N');
		JMenu edit = buildEditMenu();
		edit.setMnemonic('T');
		JMenu views = buildViewsMenu();
		views.setMnemonic('K');
		JMenu speed = buildSpeedMenu();
		speed.setMnemonic('U');
		JMenu help = buildHelpMenu();
		help.setMnemonic('H');

		menuBar.add(file);
		menuBar.add(nalozi);
		//menuBar.add(edit);
		//menuBar.add(views);
		//menuBar.add(speed);
		menuBar.add(help);
		setJMenuBar(menuBar);	
    }
//--------------------------------------------------------------------------------------------
    protected JMenu buildFileMenu() {
	JMenu file = new JMenu("Podaci");
		JMenuItem nom2 = new JMenuItem("Podaci o korisniku");
		JMenuItem nom3 = new JMenuItem("Vozila");
		JMenuItem nom4 = new JMenuItem("Exit");
		file.add(nom2);
		file.add(nom3);
		file.addSeparator();
		file.add(nom4);
		
		nom2.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   UnosPolaznika();}});
		
		nom3.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   UnosVozila();}});
		/*
		nom4.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   KontniPlan();}});
		*/
	return file;
    }
//--------------------------------------------------------------------------------------------
    protected JMenu buildNalMenu() {
		JMenu nom = new JMenu("Izve\u0161taji");
			JMenuItem nom1 = new JMenuItem("Prvi");
/*
			JMenuItem nom2 = new JMenuItem("Testovi sa znakovima");
			JMenuItem nom3 = new JMenuItem("Testovi sa raskrsnicama");
			JMenuItem nom4 = new JMenuItem("Testovi sa unosom teksta");
			JMenuItem nom6 = new JMenuItem("Slike");
			JMenuItem nom7 = new JMenuItem("Znakovi");
			JMenuItem nom8 = new JMenuItem("Prikaz znakova");


		nom1.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   Preduzeca();}});
		nom2.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   RadJed();}});
		nom3.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   Magacini();}});
		nom4.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   mKontaa();}});

		nom6.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   MestaTroska();}});
		nom7.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   Saradnici();}});
		nom8.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   Tarife();}});
*/
    nom.add(nom1);
    //nom.add(nom2);
    //nom.add(nom3);
    //nom.add(nom4);
	//nom.addSeparator();
    //nom.add(nom6);
    //nom.add(nom7);
    //nom.add(nom8);
	return nom;
    }
//--------------------------------------------------------------------------------------------
    protected JMenu buildEditMenu() {
	JMenu malo = new JMenu("Testiranje");

		JMenuItem knji1 = new JMenuItem("Testovi");
		JMenuItem knji2 = new JMenuItem("Testovi sa unosom teksta");
		JMenuItem knji3 = new JMenuItem("Znakovi");
		JMenuItem knji4 = new JMenuItem("Raskrsnice");
		
	//glavni meni---------------------
	malo.add(knji1);
	malo.add(knji2);
	malo.add(knji3);
	malo.add(knji4);
	return malo;
    }
//--------------------------------------------------------------------------------------------
    protected JMenu buildViewsMenu() {
	JMenu views = new JMenu("Prikaz");

	JMenuItem box1 = new JMenuItem("Testovi");
	JMenuItem box2 = new JMenuItem("Znakovi");
	JMenuItem box3 = new JMenuItem("Raskrsnice");

	views.add(box1);
	views.add(box2);
	views.add(box3);
	return views;
    }
//--------------------------------------------------------------------------------------------
     protected JMenu buildSpeedMenu() {
        JMenu speed = new JMenu("Uverenje");

	JMenuItem stavka = new JMenuItem("Stampa uverenja");

	stavka.setEnabled(true);

	speed.add(stavka);
	return speed;
     }

//--------------------------------------------------------------------------------------------
    protected JMenu buildHelpMenu() {
	JMenu help = new JMenu("Help");
    JMenuItem about = new JMenuItem("About Fin...");
	JMenuItem openHelp = new JMenuItem("Open Help Window");
	JMenuItem openPrint = new JMenuItem("Open Print Window");

		about.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
	        showAboutBox();
			}});

		openHelp.addActionListener(new ActionListener() {
	                       public void actionPerformed(ActionEvent e) {
				   openHelpWindow();}});


		help.add(about);
		help.add(openHelp);
		help.add(openPrint);
		return help;
    }
//--------------------------------------------------------------------------------------------
    protected void buildContent() {
        desktop = new JDesktopPane();
		desktop.setBackground(Color.black);
        getContentPane().add(desktop);
    }
//--------------------------------------------------------------------------------------------
    public void quit() {
	// zatvaranje konekcije sa mysql serverom -----------------------------
		//connection.close();	
	      System.exit(0);
    }

//--------------------------------------------------------------------------------------------
    public void UnosPolaznika() {
		JInternalFrame pred = new Korisnici();
			desktop.add(pred, "");
		try { 
			pred.setVisible(true);
			pred.setSelected(true); 
		} catch (java.beans.PropertyVetoException e2) {}
    }
//--------------------------------------------------------------------------------------------
    public void UnosVozila() {
		JInternalFrame pred = new Vozila();
			desktop.add(pred, "");
		try { 
			pred.setVisible(true);
			pred.setSelected(true); 
		} catch (java.beans.PropertyVetoException e2) {}
    }
/*
//--------------------------------------------------------------------------------------------
    public void VrKnjiz() {
		Vrsteknj vrknj = new Vrsteknj(this);
		vrknj.setVisible(true);
    }
	*/
//--------------------------------------------------------------------------------------------
    public void openHelpWindow() {
		JInternalFrame help = new FinHelp();
			desktop.add(help, HELPLAYER);
		try { 
			help.setVisible(true);
			help.setSelected(true); 
		} catch (java.beans.PropertyVetoException e2) {}
	}
//--------------------------------------------------------------------------------------------
    public void showAboutBox() {
        JOptionPane.showMessageDialog(this, ABOUTMSG);
    }
//--------------------------------------------------------------------------------------------
    public void openPrefsWindow() {
        FinPrefs dialog = new FinPrefs(this);
		//dialog.show();
		dialog.setVisible(true);
    }
}// end of FinFrame class
